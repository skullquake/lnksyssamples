#!/bin/env bash
printf '
----------------------------------------
'
printf "ONE TO ONE DEMO\n"
printf "ONE TO MANY DEMO\n"
printf "MANY TO MANY DEMO"
printf '
----------------------------------------
'
curl\
	http://localhost:1111/lib/sjs/tst/db000.js\
	-X POST\
	-H "Content-type: application/json" \
	--data \
'{
	"action":"query",
	"params":{
		"fmt":"csv",
		"query":[
"DO $$",
"DECLARE",
"    ----------------------",
"    -- cls0 variables",
"    ----------------------",
"    idxcls0         int:=0;",
"    ncls0           int:=4;",
"    _cls0_id        int;",
"    arr_cls0_id     int[];",
"    ----------------------",
"    -- cls1 variables",
"    ----------------------",
"    idxcls1         int:=0;",
"    ncls1           int:=4;",
"    _cls1_id        int;",
"    arr_cls1_id     int[];",
"    ----------------------",
"    -- cls0_cls1 variables",
"    ----------------------",
"    idxcls0_cls1_d0 int:=0;",
"    idxcls0_cls1_d1 int:=0;",
"BEGIN",
"    -- reinit",
"    drop table if exists cls0 cascade;",
"    drop table if exists cls1 cascade;",
"    drop table if exists cls0_cls1 cascade;",
"    -- many-to-many A",
"    create table cls0(",
"        cls0_id serial primary key not null,",
"        value int",
"    );",
"    -- many-to-many B",
"    create table cls1(",
"        cls1_id serial primary key not null,",
"        value int",
"    );",
"    -- many-to-many JOIN",
"    create table cls0_cls1(",
"        cls0_id int,",
"        cls1_id int",
"    );",
"    ---------------------",
"    -- populate cls0",
"    ---------------------",
"    -- clear array",
"    arr_cls0_id=array_fill(1,ARRAY[0],ARRAY[0]);",
"    idxcls0=0;",
"    LOOP",
"        EXIT WHEN idxcls0=ncls0;",
"        insert into cls0(",
"            value",
"        )values(",
"            idxcls0*10",
"        ) returning cls0_id into _cls0_id;",
"        -- push serial",
"        arr_cls0_id=arr_cls0_id||_cls0_id;",
"        idxcls0=idxcls0+1;",
"    END LOOP;",
"    ---------------------",
"    -- populate cls1",
"    ---------------------",
"    -- clear array",
"    arr_cls1_id=array_fill(1,ARRAY[0],ARRAY[0]);",
"    idxcls1=0;",
"    LOOP",
"        EXIT WHEN idxcls1=ncls1;",
"        insert into cls1(",
"            value",
"        )values(",
"            idxcls1*100",
"        ) returning cls1_id into _cls1_id;",
"        -- push serial",
"        arr_cls1_id=arr_cls1_id||_cls1_id;",
"        idxcls1=idxcls1+1;",
"    END LOOP;",
"    ---------------------",
"    -- populate cls0_cls1",
"    ---------------------",
"    idxcls0_cls1_d0=0;",
"    LOOP",
"        EXIT WHEN idxcls0_cls1_d0=array_length(arr_cls0_id,1);",
"        idxcls0_cls1_d1=0;",
"        LOOP",
"            EXIT WHEN idxcls0_cls1_d1=array_length(arr_cls1_id,1);",
"                insert into cls0_cls1(",
"                    cls0_id,",
"                    cls1_id",
"                )values(",
"                    arr_cls0_id[idxcls0_cls1_d0+1],",
"                    arr_cls1_id[idxcls0_cls1_d1+1]",
"                );",
"            idxcls0_cls1_d1=idxcls0_cls1_d1+1;",
"        END LOOP;",
"        idxcls0_cls1_d0=idxcls0_cls1_d0+1;",
"    END LOOP;",
"END $$;",
" -- join select",
"select ",
"    cls0.cls0_id as cls0id,",
"    cls1.cls1_id as cls1id,",
"    cls0.value as cls0val,",
"    cls1.value as cls1val",
"from",
"    cls0",
"join",
"    cls0_cls1",
"on",
"    cls0.cls0_id=cls0_cls1.cls1_id",
"join",
"    cls1",
"on",
"    cls1.cls1_id=cls0_cls1.cls1_id",
";",
"/*",
"select * from cls0_cls1;",
"*/",
""
		],
		"args":{
		}
	}
}'
