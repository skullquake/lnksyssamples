#!/bin/env bash
printf '
----------------------------------------
'
printf "ONE TO ONE DEMO\n"
printf "ONE TO MANY DEMO\n"
printf "MANY TO MANY DEMO"
printf '
----------------------------------------
'
curl\
	http://localhost:1111/lib/sjs/tst/db000.js\
	-X POST\
	-H "Content-type: application/json" \
	--data \
'{
	"action":"query",
	"params":{
		"fmt":"csv",
		"query":[
"DO $$",
"DECLARE",
"    idxcls0     integer:=0;",
"    ncls0       integer:=2;",
"    idxcls2     integer:=0;",
"    ncls2       integer:=2;",
"    ncls4       integer:=2;",
"    idxcls4     integer:=0;",
"    ncls5       integer:=2;",
"    idxcls5     integer:=0;",
"    _cls0_id    integer;",
"    _cls3_id    integer;",
"    _cls4_id    integer;",
"    _cls5_id    integer;",
"    _cls6_id    integer;",
"    arr_cls4_id integer[];",
"    arr_cls5_id integer[];",
"BEGIN",
"    -- reinit",
"    drop table if exists cls0 cascade;",
"    drop table if exists cls1 cascade;",
"    drop table if exists cls2 cascade;",
"    drop table if exists cls3 cascade;",
"    drop table if exists cls4 cascade;",
"    drop table if exists cls5 cascade;",
"    drop table if exists cls4_cls5 cascade;",
"    drop table if exists _output cascade;",
"    create temp table if not exists _output (value int);",
"    -- root",
"    create table cls0(",
"        cls0_id serial primary key,",
"        value int",
"    );",
"    -- one-to-one",
"    create table cls1(",
"        cls1_id serial primary key not null,",
"        cls0_id int unique references cls0(cls0_id) on delete cascade,",
"        value int",
"    );",
"    -- one-to-many",
"    create table cls2(",
"        cls2_id serial primary key not null,",
"        cls0_id int references cls0(cls0_id) on delete cascade,",
"        value int",
"    );",
"    -- many-to-many HOLDER",
"    create table cls3(",
"        cls3_id serial primary key not null,",
"        -- one-to-one",
"        cls0_id int references cls0(cls0_id) on delete cascade,",
"        value int",
"    );",
"    -- many-to-many SRC0",
"    create table cls4(",
"        cls4_id serial primary key not null,",
"        cls3_id int references cls3(cls3_id) on delete cascade,",
"        value int",
"    );",
"    -- many-to-many SRC1",
"    create table cls5(",
"        cls5_id serial primary key not null,",
"        value int",
"    );",
"    -- many-to-many JOIN",
"    create table cls4_cls5(",
"        cls4_id int,",
"        cls5_id int",
"    );",
"    -- population",
"    LOOP",
"        EXIT WHEN idxcls0=ncls0;",
"        -- populate root",
"        insert into cls0(",
"            value",
"        )values(",
"            idxcls0*10",
"        ) returning cls0_id into _cls0_id;",
"        -- populate one-to-one",
"        insert into cls1(",
"            value,",
"            cls0_id",
"        )values(",
"            idxcls0*100,",
"            _cls0_id",
"        );",
"        -- reset inner counter",
"        idxcls2=0;",
"        LOOP",
"            EXIT WHEN idxcls2=ncls2;",
"            -- populate one-to-one",
"            insert into cls2(",
"                value,",
"                cls0_id",
"            )values(",
"                (idxcls0*ncls0+idxcls2)*1000,",
"                _cls0_id",
"            );",
"            idxcls2=idxcls2+1;",
"        END LOOP;",
"        -- populate holder ",
"        insert into cls3(",
"            cls0_id",
"        )values(",
"            _cls0_id",
"        ) returning cls3_id into _cls3_id;",
"        -- populate many-to-many SRC0",
"        idxcls4=0;",
"        arr_cls4_id=arr_cls4_id||_cls4_id;",
"        -- clear array",
"        arr_cls4_id=array_fill(1,ARRAY[0],ARRAY[0]);",
"        LOOP",
"            EXIT WHEN idxcls4=ncls4;",
"            insert into cls4(",
"                value,",
"                cls3_id",
"            )values(",
"                0,",
"                _cls3_id",
"            ) returning cls4_id into _cls4_id;",
"            arr_cls4_id=arr_cls4_id||_cls4_id;",
"            idxcls4=idxcls4+1;",
"        END LOOP;",
"        -- populate many-to-many SRC1",
"        idxcls5=0;",
"        -- clear array",
"        arr_cls5_id=array_fill(1,ARRAY[0],ARRAY[0]);",
"        LOOP",
"            EXIT WHEN idxcls5=ncls5;",
"            insert into cls5(",
"                value",
"            )values(",
"                _cls0_id",
"            ) returning cls5_id into _cls5_id;",
"            arr_cls5_id=arr_cls5_id||_cls5_id;",
"            idxcls5=idxcls5+1;",
"        END LOOP;",
"        idxcls0=idxcls0+1;",
"        -- populate many-to-many SRC0_SRC1 join table",
"        idxcls4=0;",
"        LOOP",
"            EXIT WHEN idxcls4=array_length(arr_cls4_id,1);",
"            idxcls5=0;",
"            LOOP",
"                EXIT WHEN idxcls5=array_length(arr_cls5_id,1);",
"                insert into cls4_cls5(",
"                    cls4_id,",
"                    cls5_id",
"                )values(",
"                    arr_cls4_id[idxcls4+1],",
"                    arr_cls5_id[idxcls5+1]",
"                );",
"                -- insert into _output(value)values(arr_cls5_id[idxcls5+1]);",
"                idxcls5=idxcls5+1;",
"            END LOOP;",
"            -- insert into _output(value)values(arr_cls4_id[idxcls4+1]);",
"            idxcls4=idxcls4+1;",
"        END LOOP;",
"    END LOOP;",
"    -- output",
"END $$;",
"-- select cls0.cls0_id,cls0.value,cls1.value from cls0 left outer join cls1 on cls0.cls0_id=cls1.cls0_id;",
"/*",
"-- one to many",
"-- many to many",
"select ",
"    -- id",
"    cls0.cls0_id as c0,",
"    cls1.cls1_id as c1,",
"    cls2.cls2_id as c2,",
"    cls3.cls3_id as c3,",
"    -- verify",
"    cls1.cls1_id as f0,",
"    cls1.cls0_id as f1,",
"    cls2.cls2_id as f2,",
"    cls2.cls0_id as f3,",
"    -- values",
"    cls0.value as v0,",
"    cls1.value as v1,",
"    cls2.value as v2",
"from cls0",
"left outer join",
"    cls2",
"on",
"    cls0.cls0_id=cls2.cls0_id",
"left outer join",
"    cls1",
"on",
"    cls0.cls0_id=cls1.cls0_id",
"left outer join",
"    cls3",
"on",
"    cls0.cls0_id=cls3.cls0_id",
";",
"*/",
" -- join select",
"select ",
"    cls4.cls4_id,",
"    cls5.cls5_id",
"from",
"    cls4",
"join",
"    cls4_cls5",
"on",
"    cls4.cls4_id=cls4_cls5.cls4_id",
"join",
"    cls5",
"on",
"    cls5.cls5_id=cls4_cls5.cls5_id",
";",
""
		],
		"args":{
		}
	}
}'
